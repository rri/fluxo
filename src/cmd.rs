//! Command structures for executing based on user input.

use crossterm::style::{Color, Stylize};
use std::fmt::{Display, Formatter, Result};

/// Disposition of output generated by the application.
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub enum Status {
    /// Output represents successful evaluation.
    Success,
    /// Output represents failed evaluation.
    Failure,
    /// Output is neutral and represents user guidance or diagnostics.
    Content,
}

impl Status {
    /// Prefix styled content associated with this status to the given message (if non-empty).
    pub fn prefix_to(&self, msg: &str) -> String {
        msg.lines()
            .map(|s| format!("{} {}\r\n", self, s.trim_end()))
            .collect::<String>()
    }
}

impl Display for Status {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        match self {
            Status::Success => write!(f, "{}", "∴".with(Color::DarkGreen)),
            Status::Failure => write!(f, "{}", "✗".with(Color::Red)),
            Status::Content => write!(f, "{}", "≡".with(Color::DarkGrey)),
        }
    }
}
